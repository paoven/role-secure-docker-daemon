---
# main.yml


- name: Check that the server cert exists exists
  stat:
    path: "{{ dds_server_cert_path }}/server-cert.pem"
  register: server_cert_stat_result

- name: Check that the client cert exists exists
  stat:
    path: "{{ dds_client_cert_path }}/cert.pem"
  register: client_cert_stat_result

- name: "The Block"
  block:
    - name: Create a tempdir
      file:
        state: directory
        path: "{{ dds_temp_path }}"   
    
    - name: Remove passphrase file, if it exists
      file:
        state: absent
        path: "{{ dds_passphrase_file }}" 
    
    - name: Create passphrase file
      file:
        state: touch
        path: "{{ dds_passphrase_file }}" 
    
    - name: Add passphrase to the file
      lineinfile:
        dest: "{{ dds_passphrase_file }}"
        line: "{{ dds_passphrase }}" 
    
    - name: Generate ca-key.pem
      command: "openssl genrsa -aes256 -passout file:{{ dds_passphrase_file }} -out {{ dds_temp_path }}/ca-key.pem 4096"
    
    - name: Generate ca certificate   
      command: "openssl req -new -x509 -days 365 -key {{ dds_temp_path }}/ca-key.pem -sha256 -out {{ dds_temp_path }}/ca.pem -passin file:{{ dds_passphrase_file }} -subj '/C={{ dds_country }}/ST={{dds_state }}>/L={{ dds_locality }}/O={{ dds_organization }}/CN={{ dds_common_name }}'"
    
    - include: generate_server_certs.yml
    - include: generate_client_certs.yml
    
    - name: Remove the temp directory
      file:
        state: absent
        path: "{{ dds_temp_path }}"
    
    - name: Install shell script for setting DOCKER env vars
      template:
        src: "{{ role_path }}/templates/docker_env.j2"
        dest: "{{ dds_env_shell_path }}/docker_env.sh"
        mode: 0755
      when: dds_install_shell
    
    - name: get service facts
      service_facts:
  
    - name: Restart the docker daemon 
      service:
        name: docker
        state: restarted  
      when: ansible_facts.services["docker.service"].state is defined
  when: dds_force_cert_renew or server_cert_stat_result.stat.exists == False  or server_cert_stat_result.stat.exists == False    
  
- include: download_client_certs.yml
  when: dds_fetch_client_certs
